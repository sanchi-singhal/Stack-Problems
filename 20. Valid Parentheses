20. Valid Parentheses


https://leetcode.com/problems/valid-parentheses/




Solution 1: T: O(n) S:O(n)
USING STACK
(isempty can also be used as an alternative to check at the end whether stack is empty or not.)

class Solution:
    def __init__(self):
        self.l=[]
    def isValid(self, s: str) -> bool:
        for i in s:
            # print(self.l)
            if(len(self.l)>0):
                if((self.l[-1]=="(" and i==")") or(self.l[-1]=="{" and  i=="}") or (self.l[-1]=="[" and i=="]")):
                    self.pop()
                else:
                    self.push(i)
            else:
                self.push(i)
        # print(self.l,"h")
        if(self.l==[]):
            return True
        else:
            return False

    def push(self,element):
        self.l.append(element)
    def pop(self):
        if(len(self.l)>0):
            self.l.pop()
            
            
  Solution 2: avg: O(n) and worst: O(mn) S:O(1)
  USING STRINGS
  

  class Solution:
    def isValid(self, s: str) -> bool:
        while("{}" in s or "[]" in s or "()" in s):
            s=s.replace("()","")
            s=s.replace("[]","")
            s=s.replace("{}","")                  #alternative: replace.().replace().replace()
        if(len(s)==0):
            return True
        else:
            return False
            
        
Solution3: Using Dictionary and array  T:o(n) S:O(n)

class Solution:
    def isValid(self, s: str) -> bool:
        l=[]
        d={"(":")","{":"}","[":"]"}
        for i in s:
            if i in d:
                l.append(i)
            elif(len(l)>0 and d[l[-1]]==i):
                l.pop()
            else: 
                return False
        if(len(l)>0):
            return False
        else:
            return True
